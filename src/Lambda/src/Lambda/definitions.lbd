zero  = \f.\a.a
one   = \f.\a.f a
two   = \f.\a.f (f a)
three = \f.\a.f (f (f a))
four  = \f.\a.f (f (f (f a)))
five  = \f.\a.f (f (f (f (f a))))
six   = \f.\a.f (f (f (f (f (f a)))))
seven = \f.\a.f (f (f (f (f (f (f a))))))
eight = \f.\a.f (f (f (f (f (f (f (f a)))))))
nine  = \f.\a.f (f (f (f (f (f (f (f (f a))))))))
ten   = \f.\a.f (f (f (f (f (f (f (f (f (f a)))))))))


true = \x.\y.x
false = \x.\y.y

and = \a.\b.a b a
or = \a.\b.a a b
not = \a.a false true
xor = \x.\y. x (not y) y

if_then_else = \p.\x.\y.p x y

pair = \a.\b.\f.f a b
first = \p.p true
second = \p.p false

succ = \n.\f.\a.f (n f a)
add = \m.\n.\f.\a.m f (n f a)
mult = \m.\n.\f.m (n f)
pow = \m.\n.n m
pred = \n.\f.\a.n (\g.\h.h (g f)) (\u.a) (\u.u)
sub = \m.\n.n pred m

is_zero = \n.n (\m.false) true

less_than_or_equal = \n.\m.is_zero (sub n m)
less_than = \n.\m.and (less_than_or_equal n m)(not is_zero(n (pred m)))
equals = \n.\m.and (less_than_or_equal n m) (less_than_or_equal m n)
greater_than_or_equal = \n.\m.is_zero (n(pred m))
greater_than = \n.\m.and (less_than_or_equal n m) (not(is_zero(sub n m)))

compose = \f.\g.\x.f (g x)
fix = \y.(\x. y(x x)) (\x. y(x x))

list_element = \x.\xs.pair false (pair x xs)
empty_list = pair true true
is_empty = first
head = \xs.first (second xs)
tail = Î»xs.second(second xs)

fact = fix (\r.\n.is_zero n one) (\x. mult n (r (pred n)) x)

fib = fix (\r.\n.is_zero n zero (if_then_else(equals n one) (\x.plus (r (sub n one)) (r (sub n two)) x)))